{"version":3,"file":"index.dev.mjs","sources":["../../src/utils.ts","../../src/create-dash.ts","../../src/create-styles.ts"],"sourcesContent":["/**\n * An FNV-1a hashing algorithm with a 32-bit offset basis. FNV-1a hashes are designed\n * to be fast while maintaining a low collision rate. The high dispersion rate makes\n * them well-suited for hashing nearly identical strings.\n *\n * @param string - A string you want to hash\n */\nexport function hash(string: string): string {\n  // 32-bit offset basis\n  let out = 2166136261;\n  let i = 0;\n  let len = string.length;\n\n  for (; i < len; ++i)\n    out =\n      (out ^= string.charCodeAt(i)) +\n      (out << 1) +\n      (out << 4) +\n      (out << 7) +\n      (out << 8) +\n      (out << 24);\n\n  return (out >>> 0).toString(36);\n}\n\nconst minL = /(^|[:;,{}\\s])\\s+|$/g;\nconst minR = / +{/g;\n\nexport function safeHash(\n  key: string,\n  hashFn: typeof hash\n): (string: string) => string {\n  const hashCache: Record<string, string> = {};\n  let value: string | undefined;\n  return (string: string): string => {\n    if ((value = hashCache[string])) return value;\n    value = hashFn(string.replace(minL, \"$1\").replace(minR, \"{\"));\n    // allows class names to start with numbers\n    return (hashCache[string] = value =\n      !key && !isNaN(value[0] as any) ? \"_\" + value : value);\n  };\n}\n\nexport function noop(): void {}\n","import Stylis from \"@dash-ui/stylis\";\nimport type { Context, Plugable, Plugin } from \"@dash-ui/stylis\";\nimport { noop } from \"./utils\";\n\n/**\n * Dash is a tiny, performant CSS-in-JS style rule sheet manager similar to Emotion.\n *\n * @param options - Configuration options\n */\nexport function createDash(options: CreateDashOptions = {}): Dash {\n  let {\n    key = \"ui\",\n    nonce,\n    speedy,\n    stylisPlugins,\n    prefix = true,\n    container = typeof document !== \"undefined\" ? document.head : void 0,\n  } = options;\n  const stylis = new Stylis({ prefix });\n  speedy =\n    speedy === void 0 || speedy === null\n      ? !(\n          typeof process !== \"undefined\" &&\n          process.env.NODE_ENV !== \"production\"\n        )\n      : speedy;\n  const inserted: Dash[\"inserted\"] = new Set<string>();\n  const cache: Dash[\"cache\"] = new Map();\n  const sheetsCache = new Map<string, DashSheet>();\n  const sheet = styleSheet({\n    key,\n    container,\n    nonce,\n    speedy,\n  });\n\n  if (typeof document !== \"undefined\") {\n    let nodes = document.querySelectorAll('style[data-cache=\"' + key + '\"]');\n    let i = 0;\n    let attr;\n    let node;\n    const insert = inserted.add.bind(inserted);\n\n    for (; i < nodes.length; i++) {\n      /* istanbul ignore next */\n      if ((attr = (node = nodes[i]).getAttribute(`data-dash`)) === null)\n        continue;\n      attr.split(\" \").forEach(insert);\n\n      container && node.parentNode !== container && container.appendChild(node);\n    }\n\n    stylis.use(stylisPlugins)(ruleSheet as Plugin);\n  }\n\n  /* istanbul ignore next */\n  if (typeof process !== \"undefined\" && process.env.NODE_ENV !== \"production\") {\n    const commentStart = /\\/\\*/g;\n    const commentEnd = /\\*\\//g;\n\n    stylis.use((context, content) => {\n      if (context === -1) {\n        while (commentStart.test(content)) {\n          commentEnd.lastIndex = commentStart.lastIndex;\n\n          /* istanbul ignore next */\n          if (commentEnd.test(content)) {\n            commentStart.lastIndex = commentEnd.lastIndex;\n            continue;\n          }\n\n          throw new Error(\n            'Your styles have an unterminated comment (\"/*\" without ' +\n              'corresponding \"*/\").'\n          );\n        }\n\n        commentStart.lastIndex = 0;\n      }\n    });\n  }\n\n  let insert: Dash[\"insert\"] = function (key, selector, styles, styleSheet) {\n    if (inserted.has(key)) return;\n    inserted.add(key);\n    Sheet.x = styleSheet === void 0 ? sheet : styleSheet;\n    stylis(selector, styles);\n  };\n\n  if (typeof document === \"undefined\") {\n    insert = function (key, selector, styles, styleSheet) {\n      if (inserted.has(key)) return;\n      inserted.add(key);\n      Sheet.x = styleSheet === void 0 ? sheet : styleSheet;\n      cache.set(key, stylis(selector, styles));\n    };\n  }\n\n  return {\n    key,\n    sheet,\n    sheets: {\n      add(name) {\n        const sheetRef = sheetsCache.get(name) || {\n          n: 0,\n          s: styleSheet(sheet),\n        };\n        sheetsCache.set(name, sheetRef);\n        sheetRef.n++;\n        return sheetRef.s;\n      },\n      delete(name) {\n        const sheetRef = sheetsCache.get(name);\n        if (!sheetRef) return -1;\n        if (sheetRef.n === 1) {\n          sheetsCache.delete(name);\n          sheetRef.s.flush();\n        }\n        return --sheetRef.n;\n      },\n      keys: sheetsCache.keys.bind(sheetsCache),\n    },\n    stylis,\n    insert,\n    inserted,\n    cache,\n  };\n}\n\nexport interface CreateDashOptions {\n  /**\n   * Keys in sheets used to associate `<style>` tags with this\n   * specific `dash` instances via the `dash-cache` property.\n   *\n   * @default \"ui\"\n   */\n  readonly key?: string;\n  /**\n   * For security policies. A nonce is an arbitrary number that can be used just\n   * once in a cryptographic communication.\n   */\n  readonly nonce?: string;\n  /**\n   * An array of stylis plugins\n   * See: https://www.npmjs.com/package/stylis\n   */\n  readonly stylisPlugins?: Plugable[];\n  /**\n   * Turns on/off vendor prefixing. When a boolean, all prefixes will be\n   * turned on/off. Use a function to define your own prefixes for a given key/value.\n   *\n   * @default true\n   */\n  readonly prefix?:\n    | boolean\n    | ((key: string, value: any, context: any) => boolean);\n  /**\n   * This is the container that `<style>` tags will be injected into\n   * when style rules are inserted.\n   *\n   * @default document.head\n   */\n  readonly container?: HTMLElement;\n  /**\n   * Uses speedy mode for `<style>` tag insertion. It's the fastest way\n   * to insert new style rules, but will make styles uneditable in some browsers.\n   *\n   * @default false\n   */\n  readonly speedy?: boolean;\n}\n\nexport type Dash = {\n  /**\n   * The sheet key\n   */\n  readonly key: string;\n  /**\n   * The default style sheet used by this instance of Dash\n   */\n  readonly sheet: DashStyleSheet;\n  /**\n   * Used for tracking external sheets. You can safely add/delete new\n   * custom sheets using this. Those sheets can be used in the `insert()`\n   * method. The primary reason you'd want to use this is so that you can\n   * create independently flushable styles/sheets.\n   */\n  readonly sheets: DashSheets;\n  /**\n   * The instance of Stylis used by this Dash instance\n   */\n  readonly stylis: typeof Stylis;\n  /**\n   * A cache of Stylis rules saved by their keys. This is only used\n   * on the server for generating CSS files and strings from the keys\n   * used in the cache.\n   */\n  readonly cache: Map<string, string>;\n  /**\n   * A function for inserting style rules into the document and cache.\n   *\n   * @param key - The unique key of the rule. This is used for caching.\n   * @param selector - The CSS selector to insert the rule under. Omit this\n   *   when inserting a global style.\n   * @param styles - The rules string you'd like to insert into the document or cache.\n   * @param styleSheet - The style sheet to insert a rule into, for example `dash.sheet`.\n   */\n  insert(\n    key: string,\n    selector: string,\n    styles: string,\n    styleSheet?: DashStyleSheet\n  ): void;\n  /**\n   * An insertion cache. This tracks which keys have already been inserted into\n   * the DOM to prevent duplicates.\n   */\n  readonly inserted: Set<string>;\n};\n\n/**\n * A stylesheet cache that tracks references to the keys in it.\n * When there are no more references to a sheet, it will be flushed\n * from the DOM.\n */\nexport interface DashSheets {\n  /**\n   * Creates a new stylesheet if it doesn't exist and returns it.\n   *\n   * @param key - The unique key of the style sheet\n   */\n  add(key: string): DashStyleSheet;\n  /**\n   * Deletes the stylesheet from the sheets cache and flushes the\n   * `<style>` tag from the DOM if this is is the last reference to\n   * the key.\n   *\n   * @param key - The key to the sheet\n   */\n  delete(key: string): number;\n  /**\n   * Returns an iterator containing all of the keys in the cache.\n   */\n  keys(): ReturnType<Map<string, DashSheet>[\"keys\"]>;\n}\n\ninterface DashSheet {\n  /**\n   * The number of references to the sheet\n   */\n  n: number;\n  /**\n   * A dash style sheet.\n   */\n  s: DashStyleSheet;\n}\n\n//\n// Stylesheet\nexport function styleSheet(options: DashStyleSheetOptions): DashStyleSheet {\n  // Based off emotion and glamor's StyleSheet\n  const { key, container, nonce, speedy = false } = options;\n  const tags: HTMLStyleElement[] = [];\n  let size = 0;\n\n  return {\n    // include all keys so it the object can be cloned via styleSheet(sheet)\n    key,\n    nonce,\n    container,\n    speedy,\n    insert(rule) {\n      // the max length is how many rules we have per style tag, it's 65000 in\n      // speedy mode it's 1 in dev because we insert source maps that map a\n      // single rule to a location and you can only have one source map per\n      // style tag\n      if (size % (speedy ? 65000 : 1) === 0) {\n        const tag = document.createElement(\"style\");\n        tag.setAttribute(`data-dash`, key);\n        if (nonce) tag.setAttribute(\"nonce\", nonce);\n        tag.textContent = \"\";\n        container &&\n          container.insertBefore(\n            tag,\n            !tags.length ? null : tags[tags.length - 1].nextSibling\n          );\n        tags.push(tag);\n      }\n\n      const tag = tags[tags.length - 1];\n\n      if (!speedy) {\n        tag.textContent += rule;\n      } else {\n        let sheet: StyleSheet | CSSStyleSheet | null = tag.sheet;\n        let i = 0;\n        /* istanbul ignore next */\n        if (!sheet) {\n          // this weirdness brought to you by firefox\n          const { styleSheets } = document;\n          for (; i < styleSheets.length; i++)\n            if (styleSheets[i].ownerNode === tag) {\n              sheet = styleSheets[i];\n              break;\n            }\n        }\n\n        /* istanbul ignore next */\n        try {\n          // this is a really hot path\n          // we check the second character first because having \"i\"\n          // as the second character will happen less often than\n          // having \"@\" as the first character\n          const isImportRule =\n            rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64;\n          // this is the ultrafast version, works across browsers\n          // the big drawback is that the css won't be editable in devtools\n          (sheet as CSSStyleSheet).insertRule(\n            rule,\n            // we need to insert @import rules before anything else\n            // otherwise there will be an error\n            // technically this means that the @import rules will\n            // _usually_(not always since there could be multiple style tags)\n            // be the first ones in prod and generally later in dev\n            // this shouldn't really matter in the real world though\n            // @import is generally only used for font faces from google fonts\n            // and etc. so while this could be technically correct then it\n            // would be slower and larger for a tiny bit of correctness that\n            // won't matter in the real world\n            isImportRule ? 0 : (sheet as CSSStyleSheet).cssRules.length\n          );\n        } catch (e) {\n          if (\n            typeof process !== \"undefined\" &&\n            process.env.NODE_ENV !== \"production\"\n          ) {\n            console.warn(\n              'There was a problem inserting the following rule: \"' +\n                rule +\n                '\"',\n              e\n            );\n          }\n        }\n      }\n\n      size++;\n    },\n    flush() {\n      tags.forEach((tag) => (tag.parentNode as HTMLElement).removeChild(tag));\n      tags.length = 0;\n      size = 0;\n    },\n  };\n}\n\nexport interface DashStyleSheetOptions {\n  /**\n   * Keys in sheets used to associate style sheets with\n   * specific `dash` instances\n   */\n  readonly key: string;\n  /**\n   * The element to insert `<style>` tags into. For example,\n   * `document.head`.\n   */\n  readonly container?: HTMLElement;\n  /**\n   * For security policies. A nonce is an arbitrary number that can be used just\n   * once in a cryptographic communication.\n   */\n  readonly nonce?: string;\n  /**\n   * Uses speedy mode for `<style>` tag insertion. It's the fastest way\n   * to insert new style rules, but will make styles uneditable in some browsers.\n   *\n   * @default false\n   */\n  readonly speedy?: boolean;\n}\n\nexport interface DashStyleSheet {\n  /**\n   * The sheet key\n   */\n  readonly key: string;\n  /**\n   * The sheet nonce\n   */\n  readonly nonce?: string;\n  /**\n   * The sheet container\n   */\n  readonly container?: HTMLElement;\n  /**\n   * `true` if speedy mode is turned on\n   */\n  readonly speedy: boolean;\n  /**\n   * Inserts a style rule into your sheet\n   *\n   * @param rule - A style rule to insert into the sheet\n   */\n  insert(rule: string): void;\n  /**\n   * Removes all style rules from the sheet.\n   */\n  flush(): void;\n}\n\n//\n// Stylis plugins\nconst RULE_DELIMITER = \"/*|*/\";\nconst RULE_NEEDLE = RULE_DELIMITER + \"}\";\n\nfunction ruleSheet(\n  // https://github.com/thysultan/stylis.js/tree/master/plugins/rule-sheet\n  context: Context,\n  content: any,\n  selectors: string[],\n  parents: string[],\n  line: number,\n  column: number,\n  length: number,\n  ns: number,\n  depth: number,\n  at: number\n): string | undefined {\n  // property\n  if (context === 1) {\n    if (content.charCodeAt(0) === 64) {\n      // @import\n      Sheet.x.insert(content + \";\");\n      return \"\";\n    }\n  }\n  // selector\n  else if (context === 2) {\n    if (ns === 0) return content + RULE_DELIMITER;\n  }\n  // at-rule\n  else if (context === 3) {\n    // @font-face, @page\n    if (ns === 102 || ns === 112) {\n      Sheet.x.insert(selectors[0] + content);\n      return \"\";\n    } else {\n      /* istanbul ignore next */\n      return content + (at === 0 ? RULE_DELIMITER : \"\");\n    }\n  } else if (context === -2) {\n    content.split(RULE_NEEDLE).forEach((block: string) => {\n      block && Sheet.x.insert(block + \"}\");\n    });\n  }\n}\n\nconst Sheet: {\n  x: {\n    insert(rule: string): void;\n  };\n} = {\n  x: {\n    insert: noop,\n  },\n};\n","import unitless from \"@dash-ui/unitless\";\nimport type {\n  HtmlAttributes as CSSHTMLAttributes,\n  PropertiesFallback as CSSProperties,\n  Pseudos as CSSPseudos,\n  SvgAttributes as CSSSvgAttributes,\n} from \"csstype\";\nimport type { JsonValue, PartialDeep, Primitive, ValueOf } from \"type-fest\";\nimport { createDash } from \"./create-dash\";\nimport type { Dash } from \"./create-dash\";\nimport { hash as fnv1aHash, noop, safeHash } from \"./utils\";\n\n/**\n * A factory function that returns a new `styles` instance with\n * your custom configuration options.\n *\n * @param options - Configuration options\n */\nexport function createStyles<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n>(options: CreateStylesOptions<Tokens, Themes> = {}): Styles<Tokens, Themes> {\n  const dash = options.dash || createDash();\n  const { key, insert, sheets } = dash;\n  const themes = {} as Themes;\n  const tokens = {} as TokensUnion<Tokens, Themes>;\n  const hash = safeHash(key, options.hash || fnv1aHash);\n\n  let label: (args: any[]) => string;\n  // explicit here on purpose so it's not in every test\n  /* istanbul ignore next */\n  if (\n    typeof process !== \"undefined\" &&\n    process.env.NODE_ENV === \"development\"\n  ) {\n    label = function (args) {\n      // add helpful labels to the name in development\n      return [...args]\n        .reduce((curr, arg) => {\n          if (typeof arg === \"string\") {\n            curr += \"-\" + arg;\n          } else if (typeof arg === \"object\") {\n            const keys = Object.keys(arg).filter(\n              (k) => typeof arg[k] === \"number\" || arg[k]\n            );\n\n            if (keys.length) {\n              curr += \"-\" + keys.join(\"-\");\n            }\n          }\n\n          return curr;\n        }, \"\")\n        .replace(/[^\\w-]/g, \"-\");\n    };\n  }\n\n  const styles: Styles<Tokens, Themes> = {\n    variants<Variants extends string | number>(\n      styleMap: StyleMap<Variants, Tokens, Themes>\n    ): Style<Variants, Tokens, Themes> {\n      const compiledStyleMap: Record<string | number, string> = {};\n      let styleKey: keyof typeof styleMap;\n      /* istanbul ignore next */\n      for (styleKey in styleMap)\n        compiledStyleMap[styleKey] = compileStyles(styleMap[styleKey], tokens);\n\n      const defaultStyles = compiledStyleMap.default || \"\";\n\n      // style('text', {})\n      function style(): string {\n        // eslint-disable-next-line prefer-spread\n        const css_ = css.apply(null, arguments as any);\n        if (!css_) return \"\";\n        let name = hash(css_);\n        /* istanbul ignore next */\n        if (label) name += label(arguments as any);\n        const className = key + \"-\" + name;\n        insert(name, \".\" + className, css_);\n        return className;\n      }\n\n      function css(): string {\n        const args = arguments as unknown as StyleArguments<Variants>;\n        const numArgs = args.length;\n\n        if (numArgs === 1 && typeof args[0] !== \"object\") {\n          return defaultStyles + (compiledStyleMap[args[0] as any] || \"\");\n        } else if (numArgs > 0) {\n          let nextStyles = defaultStyles;\n\n          for (let i = 0; i < numArgs; i++) {\n            let arg = args[i];\n            if (typeof arg !== \"object\") {\n              nextStyles += compiledStyleMap[arg as any] || \"\";\n            } else if (arg !== null) {\n              for (const key in arg)\n                if (arg[key]) nextStyles += compiledStyleMap[key] || \"\";\n            }\n          }\n\n          return nextStyles;\n        }\n\n        return defaultStyles;\n      }\n\n      style.styles = styleMap;\n      style.css = css;\n      return style;\n    },\n    one() {\n      const one = compileStyles<Tokens, Themes>(\n        compileLiterals(arguments),\n        tokens\n      );\n      const name = hash(one);\n      const className = key + \"-\" + name;\n      const callback: StylesOne = function (createClassName) {\n        if (!createClassName && createClassName !== void 0) return \"\";\n        insert(name, \".\" + className, one);\n        return className;\n      };\n      callback.css = function (createCss) {\n        return !createCss && createCss !== void 0 ? \"\" : one;\n      };\n      return callback;\n    },\n    cls() {\n      const css = compileStyles<Tokens, Themes>(\n        compileLiterals(arguments),\n        tokens\n      );\n      const name = hash(css);\n      const className = key + \"-\" + name;\n      insert(name, \".\" + className, css);\n      return className;\n    },\n    lazy<Value extends LazyValue>(\n      lazyFn: (\n        value: Value\n      ) => string | StyleCallback<Tokens, Themes> | StyleObject\n    ): StylesLazy<Value> {\n      const cache = new Map<string | Value, string>();\n\n      function css(value?: Value): string {\n        if (value === void 0) return \"\";\n        const key = typeof value === \"object\" ? JSON.stringify(value) : value;\n        let css = cache.get(key);\n\n        if (css === void 0) {\n          css = compileStyles<Tokens, Themes>(lazyFn(value), tokens);\n          cache.set(key, css);\n        }\n\n        return css;\n      }\n\n      const lazyStyle: StylesLazy<Value> = function (value?: Value) {\n        const css_ = css(value);\n        if (!css_) return \"\";\n        const name = hash(css_);\n        const className = key + \"-\" + name;\n        insert(name, \".\" + className, css_);\n        return className;\n      };\n      lazyStyle.css = css;\n      return lazyStyle;\n    },\n    join() {\n      const css = \"\".concat(...Array.prototype.slice.call(arguments));\n      const name = hash(css);\n      const className = key + \"-\" + name;\n      insert(name, \".\" + className, css);\n      return className;\n    },\n    keyframes() {\n      const css = compileStyles<Tokens, Themes>(\n        compileLiterals(arguments),\n        tokens\n      );\n      const name = hash(css);\n      const animationName = key + \"-\" + name;\n      // Adding to a cached sheet here rather than the default sheet because\n      // we want this to persist between `clearCache()` calls.\n      insert(\n        name,\n        \"\",\n        \"@keyframes \" + animationName + \"{\" + css + \"}\",\n        sheets.add(name)\n      );\n      return animationName;\n    },\n    insertGlobal() {\n      const css = compileStyles<Tokens, Themes>(\n        compileLiterals(arguments),\n        tokens\n      );\n\n      if (!css) return noop;\n      const name = hash(css);\n      insert(name, \"\", css, sheets.add(name));\n      return function () {\n        !sheets.delete(name) && dash.inserted.delete(name);\n      };\n    },\n    insertTokens(nextTokens, selector = \":root\") {\n      const { css, vars } = serializeTokens(nextTokens, options.mangleTokens);\n      if (!css) return noop;\n      mergeTokens<Tokens, Themes>(tokens, vars);\n      return styles.insertGlobal(selector + \"{\" + css + \"}\");\n    },\n    insertThemes(nextThemes) {\n      const flush: (() => void)[] = [];\n\n      for (const name in nextThemes) {\n        flush.push(\n          styles.insertTokens(\n            // God the types here are f'ing stupid. Someone should feel free to fix this.\n            (themes[name as Extract<keyof Themes, string>] =\n              themes[name as Extract<keyof Themes, string>] === void 0\n                ? nextThemes[name]\n                : mergeTokens<any>(\n                    themes[name as Extract<keyof Themes, string>],\n                    nextThemes[name] as any\n                  )),\n            \".\" + styles.theme(name as Extract<keyof Themes, string>)\n          )\n        );\n      }\n\n      return function () {\n        flush.forEach((e) => e());\n      };\n    },\n    theme(theme) {\n      return key + \"-\" + theme + \"-theme\";\n    },\n    dash,\n    hash,\n    tokens,\n  };\n\n  Object.defineProperty(styles, \"tokens\", {\n    get() {\n      return tokens;\n    },\n    configurable: false,\n  });\n  styles.insertTokens(options.tokens || emptyObj);\n  styles.insertThemes(options.themes || emptyObj);\n  return typeof process !== \"undefined\" && process.env.NODE_ENV !== \"production\"\n    ? Object.freeze(styles)\n    : styles;\n}\n\nconst emptyObj: any = {};\n\nexport interface CreateStylesOptions<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n> {\n  /**\n   * An instance of dash created by the `createDash()` factory\n   *\n   * @default createDash()\n   */\n  dash?: Dash;\n  /**\n   * Inserts CSS tokens into the DOM and makes them available for use in\n   * style callbacks. The name of the CSS tokens is automatically generated\n   * based upon the depth of the mapping i.e. `foo.bar.baz` -> `--foo-bar-baz`.\n   *\n   * @example\n   * const styles = createStyles({\n   *   tokens: {\n   *     color: {\n   *       // var(--color-light-red)\n   *       lightRed: '#c17'\n   *     }\n   *   }\n   * })\n   *\n   * const bgRed = styles.one(({color}) => ({\n   *   backgroundColor: color.lightRed\n   * }))\n   *\n   * const Component = () => <div className={bgRed()} />\n   */\n  readonly tokens?: Tokens;\n  /**\n   * A mapping of theme name/CSS variable pairs.\n   *\n   * This Creates a CSS variable-based theme by defining tokens within a\n   * class name selector matching the theme name. Apart from that it works\n   * the same way `tokens` does.\n   *\n   * @example\n   * const styles = createStyles({\n   *   themes: {\n   *     // .ui-light\n   *     light: {\n   *       // var(--background-color)\n   *       backgroundColor: '#fff'\n   *     },\n   *     // .ui-dark\n   *     dark: {\n   *       // var(--background-color)\n   *       backgroundColor: '#000'\n   *     }\n   *   }\n   * })\n   *\n   * // CSS tokens in the 'dark' theme take precedence in this component\n   * const App = () => <div className={styles.theme('dark)}/>\n   */\n  readonly themes?: Themes;\n  /**\n   * When `true` this will mangle CSS variable names. You can also\n   * provide an object with `{key: boolean}` pairs of reserved keys\n   * which will not be mangled.\n   *\n   * @example\n   * const styles = createStyles({\n   *   // All CSS tokens will be mangled in production\n   *   mangleTokens: process.env.NODE_ENV === 'production'\n   * })\n   * @example\n   * const styles = createStyles({\n   *   mangleTokens: {\n   *     // --vh will not be mangled\n   *     vh: true\n   *   }\n   * })\n   */\n  readonly mangleTokens?: boolean | Record<string, boolean>;\n  /**\n   * Use your own hash function for creating selector names. By default\n   * Dash uses an fnv1a hashing algorithm.\n   */\n  readonly hash?: typeof fnv1aHash;\n}\n\n/**\n * Utility methods that accomplish everything you need to scale an application\n * using CSS-in-JS.\n */\nexport interface Styles<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n> {\n  /**\n   * `styles.variants()` is a function for composing styles in a\n   * deterministic way. It returns a function which when called will insert\n   * your styles into the DOM and create a unique class name.\n   *\n   * @param styleMap - A style name/value mapping\n   * @example\n   * const bg = styles({\n   *   // Define styles using an object\n   *   blue: {\n   *     backgroundColor: 'blue'\n   *   },\n   *   // Access stored CSS tokens when a callback is provided as\n   *   // the value\n   *   red: ({colors}) => `\n   *     background-color: ${colors.red};\n   *   `,\n   *   // Define styles using a string\n   *   green: `\n   *     background-color: green;\n   *   `\n   * })\n   *\n   * // This component will have a \"red\" background\n   * const Component = () => <div className={bg('blue', 'red')}/>\n   *\n   * // This component will have a \"blue\" background\n   * const Component = () => <div className={bg('red', 'blue')}/>\n   *\n   * // This component will have a \"green\" background\n   * const Component = () => <div className={bg({red: true, green: true})}/>\n   */\n  variants<Variants extends string | number>(\n    styleMap: StyleMap<Variants, Tokens, Themes>\n  ): Style<Variants, Tokens, Themes>;\n  /**\n   * A function that accepts a tagged template literal, style object, or style callback,\n   * and returns a function. That function inserts the style into a `<style>` tag and\n   * returns a class name when called.\n   *\n   * @example\n   * const row = styles.one`\n   *   display: flex;\n   *   flex-wrap: nowrap;\n   * `\n   * const Row = props => <div {...props} className={row()}/>>\n   * // This will not insert the styles if `isRow` is `false`\n   * const RowSometimes = ({isRow = false}) => <div className={row(isRow)}/>>\n   */\n  one(\n    literals:\n      | TemplateStringsArray\n      | string\n      | StyleObject\n      | StyleCallback<Tokens, Themes>,\n    ...placeholders: string[]\n  ): StylesOne;\n  /**\n   * A function that accepts a tagged template literal, style object, or style callback.\n   * Calling this will immediately insert the CSS into the DOM and return a unique\n   * class name for the styles. This is a shortcut for `styles.one('display: flex;')()`.\n   *\n   * @example\n   * const Component = () => <div className={styles.cls`display: flex;`}/>\n   */\n  cls(\n    literals:\n      | TemplateStringsArray\n      | string\n      | StyleObject\n      | StyleCallback<Tokens, Themes>,\n    ...placeholders: string[]\n  ): string;\n  /**\n   * A function that uses lazy evalution to create styles with indeterminate values.\n   * Calling this will immediately insert the CSS into the DOM and return a unique\n   * class name for the styles.\n   *\n   * @example\n   * const lazyWidth = styles.lazy((width) => ({\n   *   width\n   * }))\n   * const Component = ({width = 200}) => <div className={lazyWidth(width)}/>>\n   */\n  lazy<Value extends LazyValue>(\n    lazyFn: (\n      value: Value\n    ) => string | StyleCallback<Tokens, Themes> | StyleObject\n  ): StylesLazy<Value>;\n  /**\n   * A function that joins CSS strings, inserts them into the DOM right away, and returns a class name.\n   *\n   * @example\n   * const Component = () => <div\n   *   className={styles.join(\n   *     button.css('primary'),\n   *     transition.css('fade'),\n   *     'display: block;'\n   *   )}\n   * />\n   */\n  join(...css: string[]): string;\n  /**\n   * A function that accepts a tagged template literal, style object, or style callback.\n   * Using this will immediately insert a global `@keyframes` defintion into the DOM and\n   * return the name of the keyframes instance.\n   *\n   * @example\n   * const fadeIn = styles.keyframes`\n   *   from {\n   *     opacity: 0;\n   *   }\n   *\n   *   to {\n   *     opactity: 1\n   *   }\n   * `\n   */\n  keyframes(\n    literals:\n      | TemplateStringsArray\n      | string\n      | StyleCallback<Tokens, Themes>\n      | StyleObject,\n    ...placeholders: string[]\n  ): string;\n  /**\n   * A function that returns the generated class name for a given theme when\n   * using `insertThemes()` to create CSS variable-based themes.\n   *\n   * @param name - The name of the theme\n   * @example\n   * styles.insertThemes({\n   *  dark: {\n   *    color: {\n   *      background: '#000'\n   *    }\n   *  }\n   * })\n   *\n   * const Component = () => <div className={styles.theme('dark')}/>\n   */\n  theme(name: keyof Themes): string;\n  /**\n   * Inserts CSS tokens into the DOM and makes them available for use in\n   * style callbacks. The name of the CSS tokens is automatically generated\n   * based upon the depth of the mapping i.e. `foo.bar.baz` -> `--foo-bar-baz`.\n   * This function returns a function that will flush the styles inserted by\n   * `insertTokens()` when it is called.\n   *\n   * @param tokens - A map of CSS variable name/value pairs\n   * @param selector - Including a selector will only make these CSS variable\n   *   definitions take effect within the selector, e.g. a class name or ID. By\n   *   default the selector is `\":root\"`.\n   * @example\n   * // Inserts CSS tokens into the document `:root`\n   * styles.insertTokens({\n   *   color: {\n   *     // var(--color-indigo)\n   *     indigo: '#5c6ac4',\n   *     // var(--color-blue)\n   *     blue: '#007ace',\n   *     // var(--color-red)\n   *     red: '#de3618',\n   *   }\n   * })\n   *\n   * // Overrides the above when they are used within a `.dark` selector\n   * const flushTokens = styles.insertTokens(\n   *   {\n   *     color: {\n   *       // var(--color-indigo)\n   *       indigo: '#5c6ac4',\n   *       // var(--color-blue)\n   *       blue: '#007ace',\n   *       // var(--color-red)\n   *       red: '#de3618',\n   *     }\n   *   },\n   *   '.dark'\n   * )\n   */\n  insertTokens(tokens: PartialDeep<Tokens>, selector?: string): () => void;\n  /**\n   * Creates a CSS variable-based theme by defining tokens within a\n   * class name selector matching the theme name. Apart from that it works\n   * the same way `insertTokens()` does. This function returns a function\n   * that will flush the styles inserted by `insertTokens()` when it is called.\n   *\n   * @param themes - A mapping of theme name/CSS variable pairs.\n   * @example\n   * const flushThemes = styles.insertThemes({\n   *   // .ui-light\n   *   light: {\n   *     // var(--background-color)\n   *     backgroundColor: '#fff'\n   *   },\n   *   // .ui-dark\n   *   dark: {\n   *     // var(--background-color)\n   *     backgroundColor: '#000'\n   *   }\n   * })\n   *\n   * // \"dark\" css tokens will take precedence within this component\n   * const Component = () => <div className={styles.theme('dark)}/>\n   */\n  insertThemes(\n    themes: PartialDeep<{\n      [Name in keyof Themes]: Themes[Name];\n    }>\n  ): () => void;\n  /**\n   * A function that accepts a tagged template literal, style object, or style callback.\n   * Using this will immediately insert styles into the DOM relative to the root document.\n   * This function returns a function that will flush the styles inserted by\n   * `insertGlobal()` when it is called.\n   *\n   * @example\n   * const flushGlobal = styles.insertGlobal(({color}) => `\n   *   body {\n   *     background-color: ${color.primaryBg};\n   *   }\n   * `)\n   */\n  insertGlobal(\n    literals:\n      | TemplateStringsArray\n      | string\n      | StyleCallback<Tokens, Themes>\n      | StyleObject,\n    ...placeholders: string[]\n  ): () => void;\n  /**\n   * The CSS tokens currently defined in the instance\n   */\n  tokens: TokensUnion<Tokens, Themes>;\n  /**\n   * A hashing function for creating unique selector names\n   *\n   * @param string - The string you'd like to hash\n   */\n  hash(string: string): string;\n  /**\n   * The instance of underlying the Dash cache used by this instance. This was\n   * automatically created by `createDash()` when `createStyles()` was called.\n   * Dash controls the caching, style sheets, auto-prefixing, and DOM insertion\n   * that happens in the `styles` instance.\n   */\n  dash: Dash;\n}\n\n/**\n * A function that inserts styles from the style map into the DOM when called\n * with those style names selected.\n *\n * @param args - A series of style names or style name/boolean maps which\n *  select the styles from the style map you want to compose into a singular\n *  deterministic style and class name.\n * @example\n * const style = styles.variants({\n *   block: 'display: block',\n *   w100: 'width: 100px;',\n *   h100: 'height: 100px',\n * })\n *\n * // display: block; height: 100px; width: 100px;\n * const Component = () => <div className={style('block', 'h100', 'w100')}/>\n */\nexport type Style<\n  Variants extends string | number,\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n> = {\n  (...args: StyleArguments<Variants>): string;\n  /**\n   * A function that returns the raw, CSS string for a given\n   * name in the style map.\n   *\n   * @param names - A series of style names or style name/boolean maps which\n   *  select the styles from the style map you want to compose into a singular\n   *  CSS string.\n   * @example\n   * const style = styles.variants({\n   *   block: 'display: block',\n   *   w100: 'width: 100px;',\n   *   h100: 'height: 100px',\n   * })\n   *\n   * const someOtherStyle = styles.variants({\n   *   // display: block; height: 100px; width: 100px;\n   *   default: style.css('block', 'h100', 'w100')\n   * })\n   */\n  css(...names: StyleArguments<Variants>): string;\n  /**\n   * The style map that this `style()` instance was instantiated with.\n   */\n  styles: StyleMap<Variants, Tokens, Themes>;\n};\n\n/**\n * A function that inserts styles into the DOM when called without\n * a falsy value. If the first argument is falsy, the styles will\n * not be inserted and a class name will not be returned.\n */\nexport type StylesOne = {\n  (createClassName?: boolean | number | string | null): string;\n  /**\n   * A method that returns a CSS string if the first argument is not falsy.\n   */\n  css(createCss?: boolean | number | string | null): string;\n};\n\nexport type StyleMap<\n  Variants extends string | number,\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n> = {\n  [Name in Variants | \"default\"]?: StyleValue<Tokens, Themes>;\n};\n\nexport type StyleArguments<Variants extends string | number> = (\n  | Variants\n  | {\n      [Name in Variants]?: boolean | null | undefined | string | number;\n    }\n  | Exclude<Falsy, 0 | \"\">\n)[];\n\nexport type StyleValue<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n> = string | StyleCallback<Tokens, Themes> | StyleObject;\n\ntype KnownStyles = {\n  [property in keyof CSSProperties]?:\n    | CSSProperties[property]\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    | (string & {})\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    | (number & {});\n};\n\ntype PseudoStyles = {\n  [property in CSSPseudos | CSSHTMLAttributes | CSSSvgAttributes]?: StyleObject;\n};\n\ntype SelectorStyles = {\n  [property: string]:\n    | string\n    | number\n    | KnownStyles\n    | PseudoStyles\n    | SelectorStyles;\n};\n\nexport type StyleObject = KnownStyles & PseudoStyles & SelectorStyles;\n\nexport type StyleCallback<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n> = (tokens: TokensUnion<Tokens, Themes>) => StyleObject | string;\n\nexport type LazyValue = JsonValue;\n\n/**\n * A function that inserts indeterminate styles based on the value\n * into the DOM when called.\n *\n * @param value - A JSON serializable value to create indeterminate\n *   styles from\n */\nexport type StylesLazy<Value extends LazyValue> = {\n  (value?: Value): string;\n  /**\n   * A method that returns indeterminate CSS strings based on the value\n   * when called.\n   *\n   * @param value - A JSON serializable value to create indeterminate\n   *   styles from\n   */\n  css(value?: Value): string;\n};\n\n//\n// Utils\nexport type Falsy = false | null | undefined | \"\" | 0;\n\n/**\n * A utility function that will compile style objects and callbacks into CSS strings.\n *\n * @param styles - A style callback, object, or string\n * @param tokens - A map of CSS tokens for style callbacks\n */\nexport function compileStyles<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n>(\n  styles: StyleValue<Tokens, Themes> | Falsy,\n  tokens: TokensUnion<Tokens, Themes>\n): string {\n  const value = typeof styles === \"function\" ? styles(tokens) : styles;\n  return typeof value === \"object\" && value !== null\n    ? stringifyStyleObject(value)\n    : // TypeScript w/o \"strict\": true throws here\n      ((value || \"\") as string);\n}\n\nfunction stringifyStyleObject(object: StyleObject): string {\n  let string = \"\";\n\n  for (const key in object) {\n    const value = object[key];\n\n    if (typeof value !== \"object\") {\n      const isCustom = key.charCodeAt(1) === 45;\n      string +=\n        (isCustom ? key : cssCase(key)) +\n        \":\" +\n        (typeof value !== \"number\" ||\n        unitless[key as keyof typeof unitless] ||\n        value === 0 ||\n        isCustom\n          ? value\n          : value + \"px\") +\n        \";\";\n    } else {\n      string += key + \"{\" + stringifyStyleObject(value as StyleObject) + \"}\";\n    }\n  }\n\n  return string;\n}\n\nfunction compileLiterals(args: IArguments): string {\n  const literals = args[0];\n  return Array.isArray(literals)\n    ? literals.reduce((curr, next, i) => curr + next + (args[i + 1] || \"\"), \"\")\n    : literals;\n}\n\n//\n// Variable and theme serialization\nconst cssCaseRe = /[A-Z]|^ms/g;\nconst cssDisallowedRe = /[^\\w-]/g;\n// We cache the case transformations below because the cache\n// will grow to a predictable size and the regex is slowwwww\nconst caseCache: Record<string, string> = {};\nfunction cssCase(string: string): string {\n  return (\n    caseCache[string] ??\n    (caseCache[string] = string.replace(cssCaseRe, \"-$&\").toLowerCase())\n  );\n}\n\nfunction serializeTokens(\n  tokens: Record<string, any>,\n  mangle?: CreateStylesOptions[\"mangleTokens\"],\n  names: string[] = []\n): SerializedTokens {\n  const vars: Record<string, any> = {};\n  let css = \"\";\n\n  for (let key in tokens) {\n    const value = tokens[key];\n\n    if (typeof value === \"object\") {\n      const result = serializeTokens(value, mangle, names.concat(key));\n      vars[key] = result.vars;\n      css += result.css;\n    } else {\n      let name = cssCase(\n        names.length > 0 ? names.join(\"-\") + \"-\" + key : key\n      ).replace(cssDisallowedRe, \"-\");\n      vars[key] =\n        \"var(\" +\n        (name =\n          \"--\" +\n          (mangle === true || (mangle && !mangle[name])\n            ? mangled(name)\n            : name)) +\n        \")\";\n      css += name + \":\" + value + \";\";\n    }\n  }\n\n  return { vars, css };\n}\n\nconst mangled = safeHash(\"\", fnv1aHash);\n\ntype SerializedTokens = {\n  readonly vars: Record<string, Record<string, any> | string | number>;\n  readonly css: string;\n};\n\nfunction mergeTokens<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n>(\n  target: Record<string, any>,\n  source: Record<string, any>\n): TokensUnion<Tokens, Themes> {\n  for (const key in source) {\n    const value = source[key];\n    target[key] =\n      typeof value === \"object\" ? mergeTokens(target[key] || {}, value) : value;\n  }\n\n  return target as TokensUnion<Tokens, Themes>;\n}\n\n/**\n * A utility function that will convert a camel-cased, dot-notation string\n * into a dash-cased CSS property variable.\n *\n * @param path - A dot-notation string that represents the path to a value\n */\nexport function pathToToken<\n  Tokens extends Record<string, unknown> = TokensUnion<DashTokens, DashThemes>\n>(path: KeysUnion<Tokens>): string {\n  return (\n    \"var(--\" +\n    path.replace(/\\./g, \"-\").replace(cssCaseRe, \"-$&\").toLowerCase() +\n    \")\"\n  );\n}\n\ntype Concat<Fst, Scd> = Fst extends string\n  ? Scd extends string | number\n    ? Fst extends \"\"\n      ? `${Scd}`\n      : `${Fst}.${Scd}`\n    : never\n  : never;\n\ntype KeysUnion<T, Cache extends string = \"\"> = T extends Primitive\n  ? Cache\n  : {\n      [P in keyof T]: Concat<Cache, P> | KeysUnion<T[P], Concat<Cache, P>>;\n    }[keyof T];\n\nexport type TokensUnion<\n  Tokens extends DashTokens = DashTokens,\n  Themes extends DashThemes = DashThemes\n> = Tokens & ValueOf<Themes>;\n\n//\n// Creates and exports default `styles` instance\nexport const styles: Styles<DashTokens, DashThemes> = createStyles();\n\n/**\n * These are CSS variable type definitions that tell functions like\n * style callbacks which tokens are available. They can be defined\n * globally in your application like so:\n *\n * @example\n * declare module '＠dash-ui/styles' {\n *   export interface DashTokens {\n *     color: {\n *       red: string\n *     }\n *   }\n * }\n *\n * They can also be created automatically when you use a `createStyles()` factory.\n * @example\n * const styles = createStyles({\n *   tokens: {\n *     foo: 'bar',\n *     bar: 'baz'\n *   }\n * })\n *\n * // \"foo\" | \"bar\"\n * type Level1VariableNames = keyof DashTokens\n */\nexport interface DashTokens extends Record<string, unknown> {}\n\n/**\n * These are CSS variable theme type definitions that tell functions like\n * style callbacks which tokens are available and which themes are available in\n * `styles.theme()`. They can be defined globally in your application like so:\n *\n * @example\n * declare module '＠dash-ui/styles' {\n *   export interface DashThemes {\n *     light: {\n *       color: {\n *         red: string;\n *       }\n *     }\n *     dark: {\n *       color: {\n *         red: string;\n *       }\n *     }\n *   }\n * }\n */\nexport interface DashThemes extends Record<string, Record<string, unknown>> {}\n\n/**\n * The names of the themes defined in the `DashThemes` type\n */\nexport type DashThemeNames = Extract<keyof DashThemes, string>;\n"],"names":["hash","string","out","i","len","length","charCodeAt","toString","minL","minR","safeHash","key","hashFn","hashCache","value","replace","isNaN","noop","createDash","options","nonce","speedy","stylisPlugins","prefix","container","document","head","stylis","Stylis","process","inserted","Set","cache","Map","sheetsCache","sheet","styleSheet","nodes","querySelectorAll","attr","node","insert","add","bind","getAttribute","split","forEach","parentNode","appendChild","use","ruleSheet","commentStart","commentEnd","context","content","test","lastIndex","Error","selector","styles","has","Sheet","x","set","sheets","name","sheetRef","get","n","s","delete","flush","keys","tag","removeChild","tags","size","rule","createElement","setAttribute","textContent","insertBefore","nextSibling","push","styleSheets","ownerNode","isImportRule","insertRule","cssRules","e","console","warn","RULE_DELIMITER","RULE_NEEDLE","block","selectors","parents","line","column","ns","depth","at","curr","arg","k","Object","filter","join","args","reduce","createStyles","dash","themes","tokens","fnv1aHash","label","variants","styleMap","compiledStyleMap","styleKey","compileStyles","defaultStyles","default","style","css_","css","apply","arguments","className","numArgs","nextStyles","one","compileLiterals","callback","createClassName","createCss","cls","lazy","lazyFn","JSON","stringify","lazyStyle","concat","Array","prototype","slice","call","keyframes","animationName","insertGlobal","insertTokens","nextTokens","vars","serializeTokens","mangleTokens","mergeTokens","insertThemes","nextThemes","theme","defineProperty","configurable","emptyObj","freeze","stringifyStyleObject","object","isCustom","cssCase","unitless","literals","isArray","next","cssCaseRe","cssDisallowedRe","caseCache","toLowerCase","mangle","names","result","mangled","target","source","pathToToken","path"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,IAAT,CAAcC,MAAd,EAAsC;AAC3C;AACA,MAAIC,GAAG,GAAG,UAAV;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,GAAG,GAAGH,MAAM,CAACI,MAAjB;;AAEA,SAAOF,CAAC,GAAGC,GAAX,EAAgB,EAAED,CAAlB;AACED,IAAAA,GAAG,GACD,CAACA,GAAG,IAAID,MAAM,CAACK,UAAP,CAAkBH,CAAlB,CAAR,KACCD,GAAG,IAAI,CADR,KAECA,GAAG,IAAI,CAFR,KAGCA,GAAG,IAAI,CAHR,KAICA,GAAG,IAAI,CAJR,KAKCA,GAAG,IAAI,EALR,CADF;AADF;;AASA,SAAO,CAACA,GAAG,KAAK,CAAT,EAAYK,QAAZ,CAAqB,EAArB,CAAP;AACD;AAED,IAAMC,IAAI,GAAG,qBAAb;AACA,IAAMC,IAAI,GAAG,MAAb;AAEO,SAASC,QAAT,CACLC,GADK,EAELC,MAFK,EAGuB;AAC5B,MAAMC,SAAiC,GAAG,EAA1C;AACA,MAAIC,KAAJ;AACA,SAAQb,MAAD,IAA4B;AACjC,QAAKa,KAAK,GAAGD,SAAS,CAACZ,MAAD,CAAtB,EAAiC,OAAOa,KAAP;AACjCA,IAAAA,KAAK,GAAGF,MAAM,CAACX,MAAM,CAACc,OAAP,CAAeP,IAAf,EAAqB,IAArB,EAA2BO,OAA3B,CAAmCN,IAAnC,EAAyC,GAAzC,CAAD,CAAd,CAFiC;;AAIjC,WAAQI,SAAS,CAACZ,MAAD,CAAT,GAAoBa,KAAK,GAC/B,CAACH,GAAD,IAAQ,CAACK,KAAK,CAACF,KAAK,CAAC,CAAD,CAAN,CAAd,GAAkC,MAAMA,KAAxC,GAAgDA,KADlD;AAED,GAND;AAOD;AAEM,SAASG,IAAT,GAAsB;;ACvC7B;AACA;AACA;AACA;AACA;;AACO,SAASC,UAAT,CAAoBC,OAApB,EAA2D;AAAA,MAAvCA,OAAuC;AAAvCA,IAAAA,OAAuC,GAAV,EAAU;AAAA;;AAChE,MAAI;AACFR,IAAAA,GAAG,GAAG,IADJ;AAEFS,IAAAA,KAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,aAJE;AAKFC,IAAAA,MAAM,GAAG,IALP;AAMFC,IAAAA,SAAS,GAAG,OAAOC,QAAP,KAAoB,WAApB,GAAkCA,QAAQ,CAACC,IAA3C,GAAkD,KAAK;AANjE,MAOAP,OAPJ;AAQA,MAAMQ,MAAM,GAAG,IAAIC,MAAJ,CAAW;AAAEL,IAAAA;AAAF,GAAX,CAAf;AACAF,EAAAA,MAAM,GACJA,MAAM,KAAK,KAAK,CAAhB,IAAqBA,MAAM,KAAK,IAAhC,GACI,EACE,OAAOQ,OAAP,KAAmB,WAAnB,IACAA,YAAA,KAAyB,YAF3B,CADJ,GAKIR,MANN;AAOA,MAAMS,QAA0B,GAAG,IAAIC,GAAJ,EAAnC;AACA,MAAMC,KAAoB,GAAG,IAAIC,GAAJ,EAA7B;AACA,MAAMC,WAAW,GAAG,IAAID,GAAJ,EAApB;AACA,MAAME,KAAK,GAAGC,UAAU,CAAC;AACvBzB,IAAAA,GADuB;AAEvBa,IAAAA,SAFuB;AAGvBJ,IAAAA,KAHuB;AAIvBC,IAAAA;AAJuB,GAAD,CAAxB;;AAOA,MAAI,OAAOI,QAAP,KAAoB,WAAxB,EAAqC;AACnC,QAAIY,KAAK,GAAGZ,QAAQ,CAACa,gBAAT,CAA0B,uBAAuB3B,GAAvB,GAA6B,IAAvD,CAAZ;AACA,QAAIR,CAAC,GAAG,CAAR;AACA,QAAIoC,IAAJ;AACA,QAAIC,IAAJ;;AACA,QAAMC,OAAM,GAAGX,QAAQ,CAACY,GAAT,CAAaC,IAAb,CAAkBb,QAAlB,CAAf;;AAEA,WAAO3B,CAAC,GAAGkC,KAAK,CAAChC,MAAjB,EAAyBF,CAAC,EAA1B,EAA8B;AAC5B;AACA,UAAI,CAACoC,IAAI,GAAG,CAACC,IAAI,GAAGH,KAAK,CAAClC,CAAD,CAAb,EAAkByC,YAAlB,aAAR,MAAyD,IAA7D,EACE;AACFL,MAAAA,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgBC,OAAhB,CAAwBL,OAAxB;AAEAjB,MAAAA,SAAS,IAAIgB,IAAI,CAACO,UAAL,KAAoBvB,SAAjC,IAA8CA,SAAS,CAACwB,WAAV,CAAsBR,IAAtB,CAA9C;AACD;;AAEDb,IAAAA,MAAM,CAACsB,GAAP,CAAW3B,aAAX,EAA0B4B,SAA1B;AACD;AAED;;;AACA,MAAI,OAAOrB,OAAP,KAAmB,WAAnB,IAAkCA,YAAA,KAAyB,YAA/D,EAA6E;AAC3E,QAAMsB,YAAY,GAAG,OAArB;AACA,QAAMC,UAAU,GAAG,OAAnB;AAEAzB,IAAAA,MAAM,CAACsB,GAAP,CAAW,CAACI,OAAD,EAAUC,OAAV,KAAsB;AAC/B,UAAID,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClB,eAAOF,YAAY,CAACI,IAAb,CAAkBD,OAAlB,CAAP,EAAmC;AACjCF,UAAAA,UAAU,CAACI,SAAX,GAAuBL,YAAY,CAACK,SAApC;AAEA;;AACA,cAAIJ,UAAU,CAACG,IAAX,CAAgBD,OAAhB,CAAJ,EAA8B;AAC5BH,YAAAA,YAAY,CAACK,SAAb,GAAyBJ,UAAU,CAACI,SAApC;AACA;AACD;;AAED,gBAAM,IAAIC,KAAJ,CACJ,4DACE,sBAFE,CAAN;AAID;;AAEDN,QAAAA,YAAY,CAACK,SAAb,GAAyB,CAAzB;AACD;AACF,KAnBD;AAoBD;;AAED,MAAIf,MAAsB,GAAG,gBAAU9B,GAAV,EAAe+C,QAAf,EAAyBC,MAAzB,EAAiCvB,UAAjC,EAA6C;AACxE,QAAIN,QAAQ,CAAC8B,GAAT,CAAajD,GAAb,CAAJ,EAAuB;AACvBmB,IAAAA,QAAQ,CAACY,GAAT,CAAa/B,GAAb;AACAkD,IAAAA,KAAK,CAACC,CAAN,GAAU1B,UAAU,KAAK,KAAK,CAApB,GAAwBD,KAAxB,GAAgCC,UAA1C;AACAT,IAAAA,MAAM,CAAC+B,QAAD,EAAWC,MAAX,CAAN;AACD,GALD;;AAQW,oBAAUhD,GAAV,EAAe+C,QAAf,EAAyBC,MAAzB,EAAiCvB,UAAjC,EAA6C;AACpD,QAAIN,QAAQ,CAAC8B,GAAT,CAAajD,GAAb,CAAJ,EAAuB;AACvBmB,IAAAA,QAAQ,CAACY,GAAT,CAAa/B,GAAb;AACAkD,IAAAA,KAAK,CAACC,CAAN,GAAU1B,UAAU,KAAK,KAAK,CAApB,GAAwBD,KAAxB,GAAgCC,UAA1C;AACAJ,IAAAA,KAAK,CAAC+B,GAAN,CAAUpD,GAAV,EAAegB,MAAM,CAAC+B,QAAD,EAAWC,MAAX,CAArB;AACD;;AANH,MAAI,OAAOlC,QAAP,KAAoB,WAAxB,EAAqC;AACnCgB,IAAAA,MAAM,WAAN;AAMD;;AAED,SAAO;AACL9B,IAAAA,GADK;AAELwB,IAAAA,KAFK;AAGL6B,IAAAA,MAAM,EAAE;AACNtB,MAAAA,GAAG,CAACuB,IAAD,EAAO;AACR,YAAMC,QAAQ,GAAGhC,WAAW,CAACiC,GAAZ,CAAgBF,IAAhB,KAAyB;AACxCG,UAAAA,CAAC,EAAE,CADqC;AAExCC,UAAAA,CAAC,EAAEjC,UAAU,CAACD,KAAD;AAF2B,SAA1C;AAIAD,QAAAA,WAAW,CAAC6B,GAAZ,CAAgBE,IAAhB,EAAsBC,QAAtB;AACAA,QAAAA,QAAQ,CAACE,CAAT;AACA,eAAOF,QAAQ,CAACG,CAAhB;AACD,OATK;;AAUNC,MAAAA,MAAM,CAACL,IAAD,EAAO;AACX,YAAMC,QAAQ,GAAGhC,WAAW,CAACiC,GAAZ,CAAgBF,IAAhB,CAAjB;AACA,YAAI,CAACC,QAAL,EAAe,OAAO,CAAC,CAAR;;AACf,YAAIA,QAAQ,CAACE,CAAT,KAAe,CAAnB,EAAsB;AACpBlC,UAAAA,WAAW,CAACoC,MAAZ,CAAmBL,IAAnB;AACAC,UAAAA,QAAQ,CAACG,CAAT,CAAWE,KAAX;AACD;;AACD,eAAO,EAAEL,QAAQ,CAACE,CAAlB;AACD,OAlBK;;AAmBNI,MAAAA,IAAI,EAAEtC,WAAW,CAACsC,IAAZ,CAAiB7B,IAAjB,CAAsBT,WAAtB;AAnBA,KAHH;AAwBLP,IAAAA,MAxBK;AAyBLc,IAAAA,MAzBK;AA0BLX,IAAAA,QA1BK;AA2BLE,IAAAA;AA3BK,GAAP;AA6BD;;AA8NkB,cAACyC,GAAD;AAAA,SAAUA,GAAG,CAAC1B,UAAL,CAAgC2B,WAAhC,CAA4CD,GAA5C,CAAT;AAAA;;AA5FnB;AACA;AACO,SAASrC,UAAT,CAAoBjB,OAApB,EAAoE;AACzE;AACA,MAAM;AAAER,IAAAA,GAAF;AAAOa,IAAAA,SAAP;AAAkBJ,IAAAA,KAAlB;AAAyBC,IAAAA,MAAM,GAAG;AAAlC,MAA4CF,OAAlD;AACA,MAAMwD,IAAwB,GAAG,EAAjC;AACA,MAAIC,IAAI,GAAG,CAAX;AAEA,SAAO;AACL;AACAjE,IAAAA,GAFK;AAGLS,IAAAA,KAHK;AAILI,IAAAA,SAJK;AAKLH,IAAAA,MALK;;AAMLoB,IAAAA,MAAM,CAACoC,IAAD,EAAO;AACX;AACA;AACA;AACA;AACA,UAAID,IAAI,IAAIvD,MAAM,GAAG,KAAH,GAAW,CAArB,CAAJ,KAAgC,CAApC,EAAuC;AACrC,YAAMoD,IAAG,GAAGhD,QAAQ,CAACqD,aAAT,CAAuB,OAAvB,CAAZ;;AACAL,QAAAA,IAAG,CAACM,YAAJ,cAA8BpE,GAA9B;;AACA,YAAIS,KAAJ,EAAWqD,IAAG,CAACM,YAAJ,CAAiB,OAAjB,EAA0B3D,KAA1B;AACXqD,QAAAA,IAAG,CAACO,WAAJ,GAAkB,EAAlB;AACAxD,QAAAA,SAAS,IACPA,SAAS,CAACyD,YAAV,CACER,IADF,EAEE,CAACE,IAAI,CAACtE,MAAN,GAAe,IAAf,GAAsBsE,IAAI,CAACA,IAAI,CAACtE,MAAL,GAAc,CAAf,CAAJ,CAAsB6E,WAF9C,CADF;AAKAP,QAAAA,IAAI,CAACQ,IAAL,CAAUV,IAAV;AACD;;AAED,UAAMA,GAAG,GAAGE,IAAI,CAACA,IAAI,CAACtE,MAAL,GAAc,CAAf,CAAhB;;AAEA,UAAI,CAACgB,MAAL,EAAa;AACXoD,QAAAA,GAAG,CAACO,WAAJ,IAAmBH,IAAnB;AACD,OAFD,MAEO;AACL,YAAI1C,KAAwC,GAAGsC,GAAG,CAACtC,KAAnD;AACA,YAAIhC,CAAC,GAAG,CAAR;AACA;;AACA,YAAI,CAACgC,KAAL,EAAY;AACV;AACA,cAAM;AAAEiD,YAAAA;AAAF,cAAkB3D,QAAxB;;AACA,iBAAOtB,CAAC,GAAGiF,WAAW,CAAC/E,MAAvB,EAA+BF,CAAC,EAAhC;AACE,gBAAIiF,WAAW,CAACjF,CAAD,CAAX,CAAekF,SAAf,KAA6BZ,GAAjC,EAAsC;AACpCtC,cAAAA,KAAK,GAAGiD,WAAW,CAACjF,CAAD,CAAnB;AACA;AACD;AAJH;AAKD;AAED;;;AACA,YAAI;AACF;AACA;AACA;AACA;AACA,cAAMmF,YAAY,GAChBT,IAAI,CAACvE,UAAL,CAAgB,CAAhB,MAAuB,GAAvB,IAA8BuE,IAAI,CAACvE,UAAL,CAAgB,CAAhB,MAAuB,EADvD,CALE;AAQF;;AACC6B,UAAAA,KAAD,CAAyBoD,UAAzB,CACEV,IADF;AAGE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAS,UAAAA,YAAY,GAAG,CAAH,GAAQnD,KAAD,CAAyBqD,QAAzB,CAAkCnF,MAZvD;AAcD,SAvBD,CAuBE,OAAOoF,CAAP,EAAU;AACV,cACE,OAAO5D,OAAP,KAAmB,WAAnB,IACAA,YAAA,KAAyB,YAF3B,EAGE;AACA6D,YAAAA,OAAO,CAACC,IAAR,CACE,wDACEd,IADF,GAEE,GAHJ,EAIEY,CAJF;AAMD;AACF;AACF;;AAEDb,MAAAA,IAAI;AACL,KAlFI;;AAmFLL,IAAAA,KAAK,GAAG;AACNI,MAAAA,IAAI,CAAC7B,OAAL;AACA6B,MAAAA,IAAI,CAACtE,MAAL,GAAc,CAAd;AACAuE,MAAAA,IAAI,GAAG,CAAP;AACD;;AAvFI,GAAP;AAyFD;AAwDD;AACA;AACA,IAAMgB,cAAc,GAAG,OAAvB;AACA,IAAMC,WAAW,GAAGD,cAAc,GAAG,GAArC;;AAsCuC,iBAACE,KAAD,EAAmB;AACpDA,EAAAA,KAAK,IAAIjC,KAAK,CAACC,CAAN,CAAQrB,MAAR,CAAeqD,KAAK,GAAG,GAAvB,CAAT;AACD;;AAtCL,SAAS5C,SAAT;AAEEG,OAFF,EAGEC,OAHF,EAIEyC,SAJF,EAKEC,OALF,EAMEC,IANF,EAOEC,MAPF,EAQE7F,MARF,EASE8F,EATF,EAUEC,KAVF,EAWEC,EAXF,EAYsB;AACpB;AACA,MAAIhD,OAAO,KAAK,CAAhB,EAAmB;AACjB,QAAIC,OAAO,CAAChD,UAAR,CAAmB,CAAnB,MAA0B,EAA9B,EAAkC;AAChC;AACAuD,MAAAA,KAAK,CAACC,CAAN,CAAQrB,MAAR,CAAea,OAAO,GAAG,GAAzB;AACA,aAAO,EAAP;AACD;AACF,GAND;AAAA,OAQK,IAAID,OAAO,KAAK,CAAhB,EAAmB;AACtB,QAAI8C,EAAE,KAAK,CAAX,EAAc,OAAO7C,OAAO,GAAGsC,cAAjB;AACf,GAFI;AAAA,OAIA,IAAIvC,OAAO,KAAK,CAAhB,EAAmB;AACtB;AACA,QAAI8C,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAzB,EAA8B;AAC5BtC,MAAAA,KAAK,CAACC,CAAN,CAAQrB,MAAR,CAAesD,SAAS,CAAC,CAAD,CAAT,GAAezC,OAA9B;AACA,aAAO,EAAP;AACD,KAHD,MAGO;AACL;AACA,aAAOA,OAAO,IAAI+C,EAAE,KAAK,CAAP,GAAWT,cAAX,GAA4B,EAAhC,CAAd;AACD;AACF,GATI,MASE,IAAIvC,OAAO,KAAK,CAAC,CAAjB,EAAoB;AACzBC,IAAAA,OAAO,CAACT,KAAR,CAAcgD,WAAd,EAA2B/C,OAA3B;AAGD;AACF;;AAED,IAAMe,KAIL,GAAG;AACFC,EAAAA,CAAC,EAAE;AACDrB,IAAAA,MAAM,EAAExB;AADP;AADD,CAJJ;;AC7bA;AACA;AACA;AACA;AACA;AACA;;AAqBgB,eAACqF,IAAD,EAAOC,GAAP,EAAe;AAKjB,gBAACC,CAAD;AAAA,WAAO,OAAOD,GAAG,CAACC,CAAD,CAAV,KAAkB,QAAlB,IAA8BD,GAAG,CAACC,CAAD,CAAxC;AAAA;;AAJJ,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3BD,IAAAA,IAAI,IAAI,MAAMC,GAAd;AACD,GAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClC,QAAM/B,IAAI,GAAGiC,MAAM,CAACjC,IAAP,CAAY+B,GAAZ,EAAiBG,MAAjB,MAAb;;AAIA,QAAIlC,IAAI,CAACnE,MAAT,EAAiB;AACfiG,MAAAA,IAAI,IAAI,MAAM9B,IAAI,CAACmC,IAAL,CAAU,GAAV,CAAd;AACD;AACF;;AAED,SAAOL,IAAP;AACD;;AAjBG,gBAAUM,IAAV,EAAgB;AACtB;AACA,SAAO,CAAC,GAAGA,IAAJ,EACJC,MADI,QAeF,EAfE,EAgBJ9F,OAhBI,CAgBI,SAhBJ,EAgBe,GAhBf,CAAP;AAiBD;;AAkLiB,eAAC0E,CAAD;AAAA,SAAOA,CAAC,EAAR;AAAA;;AAtNf,SAASqB,YAAT,CAGL3F,OAHK,EAGsE;AAAA,MAA3EA,OAA2E;AAA3EA,IAAAA,OAA2E,GAA5B,EAA4B;AAAA;;AAC3E,MAAM4F,IAAI,GAAG5F,OAAO,CAAC4F,IAAR,IAAgB7F,UAAU,EAAvC;AACA,MAAM;AAAEP,IAAAA,GAAF;AAAO8B,IAAAA,MAAP;AAAeuB,IAAAA;AAAf,MAA0B+C,IAAhC;AACA,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMjH,MAAI,GAAGU,QAAQ,CAACC,GAAD,EAAMQ,OAAO,CAACnB,IAAR,IAAgBkH,IAAtB,CAArB;AAEA,MAAIC,KAAJ,CAP2E;;AAS3E;;AACA,MACE,OAAOtF,OAAP,KAAmB,WAAnB,IACAA,YAAA,KAAyB,aAF3B,EAGE;AACAsF,IAAAA,KAAK,SAAL;AAoBD;;AAED,MAAMxD,MAA8B,GAAG;AACrCyD,IAAAA,QAAQ,CACNC,QADM,EAE2B;AACjC,UAAMC,gBAAiD,GAAG,EAA1D;AACA,UAAIC,QAAJ;AACA;;AACA,WAAKA,QAAL,IAAiBF,QAAjB;AACEC,QAAAA,gBAAgB,CAACC,QAAD,CAAhB,GAA6BC,aAAa,CAACH,QAAQ,CAACE,QAAD,CAAT,EAAqBN,MAArB,CAA1C;AADF;;AAGA,UAAMQ,aAAa,GAAGH,gBAAgB,CAACI,OAAjB,IAA4B,EAAlD,CAPiC;;AAUjC,eAASC,KAAT,GAAyB;AACvB;AACA,YAAMC,IAAI,GAAGC,GAAG,CAACC,KAAJ,CAAU,IAAV,EAAgBC,SAAhB,CAAb;AACA,YAAI,CAACH,IAAL,EAAW,OAAO,EAAP;AACX,YAAI3D,IAAI,GAAGjE,MAAI,CAAC4H,IAAD,CAAf;AACA;;AACA,YAAIT,KAAJ,EAAWlD,IAAI,IAAIkD,KAAK,CAACY,SAAD,CAAb;AACX,YAAMC,SAAS,GAAGrH,GAAG,GAAG,GAAN,GAAYsD,IAA9B;AACAxB,QAAAA,MAAM,CAACwB,IAAD,EAAO,MAAM+D,SAAb,EAAwBJ,IAAxB,CAAN;AACA,eAAOI,SAAP;AACD;;AAED,eAASH,GAAT,GAAuB;AACrB,YAAMjB,IAAI,GAAGmB,SAAb;AACA,YAAME,OAAO,GAAGrB,IAAI,CAACvG,MAArB;;AAEA,YAAI4H,OAAO,KAAK,CAAZ,IAAiB,OAAOrB,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAxC,EAAkD;AAChD,iBAAOa,aAAa,IAAIH,gBAAgB,CAACV,IAAI,CAAC,CAAD,CAAL,CAAhB,IAAoC,EAAxC,CAApB;AACD,SAFD,MAEO,IAAIqB,OAAO,GAAG,CAAd,EAAiB;AACtB,cAAIC,UAAU,GAAGT,aAAjB;;AAEA,eAAK,IAAItH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8H,OAApB,EAA6B9H,CAAC,EAA9B,EAAkC;AAChC,gBAAIoG,GAAG,GAAGK,IAAI,CAACzG,CAAD,CAAd;;AACA,gBAAI,OAAOoG,GAAP,KAAe,QAAnB,EAA6B;AAC3B2B,cAAAA,UAAU,IAAIZ,gBAAgB,CAACf,GAAD,CAAhB,IAAgC,EAA9C;AACD,aAFD,MAEO,IAAIA,GAAG,KAAK,IAAZ,EAAkB;AACvB,mBAAK,IAAM5F,IAAX,IAAkB4F,GAAlB;AACE,oBAAIA,GAAG,CAAC5F,IAAD,CAAP,EAAcuH,UAAU,IAAIZ,gBAAgB,CAAC3G,IAAD,CAAhB,IAAyB,EAAvC;AADhB;AAED;AACF;;AAED,iBAAOuH,UAAP;AACD;;AAED,eAAOT,aAAP;AACD;;AAEDE,MAAAA,KAAK,CAAChE,MAAN,GAAe0D,QAAf;AACAM,MAAAA,KAAK,CAACE,GAAN,GAAYA,GAAZ;AACA,aAAOF,KAAP;AACD,KArDoC;;AAsDrCQ,IAAAA,GAAG,GAAG;AACJ,UAAMA,GAAG,GAAGX,aAAa,CACvBY,eAAe,CAACL,SAAD,CADQ,EAEvBd,MAFuB,CAAzB;AAIA,UAAMhD,IAAI,GAAGjE,MAAI,CAACmI,GAAD,CAAjB;AACA,UAAMH,SAAS,GAAGrH,GAAG,GAAG,GAAN,GAAYsD,IAA9B;;AACA,UAAMoE,QAAmB,GAAG,SAAtBA,QAAsB,CAAUC,eAAV,EAA2B;AACrD,YAAI,CAACA,eAAD,IAAoBA,eAAe,KAAK,KAAK,CAAjD,EAAoD,OAAO,EAAP;AACpD7F,QAAAA,MAAM,CAACwB,IAAD,EAAO,MAAM+D,SAAb,EAAwBG,GAAxB,CAAN;AACA,eAAOH,SAAP;AACD,OAJD;;AAKAK,MAAAA,QAAQ,CAACR,GAAT,GAAe,UAAUU,SAAV,EAAqB;AAClC,eAAO,CAACA,SAAD,IAAcA,SAAS,KAAK,KAAK,CAAjC,GAAqC,EAArC,GAA0CJ,GAAjD;AACD,OAFD;;AAGA,aAAOE,QAAP;AACD,KAtEoC;;AAuErCG,IAAAA,GAAG,GAAG;AACJ,UAAMX,GAAG,GAAGL,aAAa,CACvBY,eAAe,CAACL,SAAD,CADQ,EAEvBd,MAFuB,CAAzB;AAIA,UAAMhD,IAAI,GAAGjE,MAAI,CAAC6H,GAAD,CAAjB;AACA,UAAMG,SAAS,GAAGrH,GAAG,GAAG,GAAN,GAAYsD,IAA9B;AACAxB,MAAAA,MAAM,CAACwB,IAAD,EAAO,MAAM+D,SAAb,EAAwBH,GAAxB,CAAN;AACA,aAAOG,SAAP;AACD,KAhFoC;;AAiFrCS,IAAAA,IAAI,CACFC,MADE,EAIiB;AACnB,UAAM1G,KAAK,GAAG,IAAIC,GAAJ,EAAd;;AAEA,eAAS4F,GAAT,CAAa/G,KAAb,EAAoC;AAClC,YAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB,OAAO,EAAP;AACtB,YAAMH,GAAG,GAAG,OAAOG,KAAP,KAAiB,QAAjB,GAA4B6H,IAAI,CAACC,SAAL,CAAe9H,KAAf,CAA5B,GAAoDA,KAAhE;AACA,YAAI+G,GAAG,GAAG7F,KAAK,CAACmC,GAAN,CAAUxD,GAAV,CAAV;;AAEA,YAAIkH,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClBA,UAAAA,GAAG,GAAGL,aAAa,CAAiBkB,MAAM,CAAC5H,KAAD,CAAvB,EAAgCmG,MAAhC,CAAnB;AACAjF,UAAAA,KAAK,CAAC+B,GAAN,CAAUpD,GAAV,EAAekH,GAAf;AACD;;AAED,eAAOA,GAAP;AACD;;AAED,UAAMgB,SAA4B,GAAG,SAA/BA,SAA+B,CAAU/H,KAAV,EAAyB;AAC5D,YAAM8G,IAAI,GAAGC,GAAG,CAAC/G,KAAD,CAAhB;AACA,YAAI,CAAC8G,IAAL,EAAW,OAAO,EAAP;AACX,YAAM3D,IAAI,GAAGjE,MAAI,CAAC4H,IAAD,CAAjB;AACA,YAAMI,SAAS,GAAGrH,GAAG,GAAG,GAAN,GAAYsD,IAA9B;AACAxB,QAAAA,MAAM,CAACwB,IAAD,EAAO,MAAM+D,SAAb,EAAwBJ,IAAxB,CAAN;AACA,eAAOI,SAAP;AACD,OAPD;;AAQAa,MAAAA,SAAS,CAAChB,GAAV,GAAgBA,GAAhB;AACA,aAAOgB,SAAP;AACD,KA/GoC;;AAgHrClC,IAAAA,IAAI,GAAG;AACL,UAAMkB,GAAG,GAAG,GAAGiB,MAAH,CAAU,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BnB,SAA3B,CAAb,CAAZ;AACA,UAAM9D,IAAI,GAAGjE,MAAI,CAAC6H,GAAD,CAAjB;AACA,UAAMG,SAAS,GAAGrH,GAAG,GAAG,GAAN,GAAYsD,IAA9B;AACAxB,MAAAA,MAAM,CAACwB,IAAD,EAAO,MAAM+D,SAAb,EAAwBH,GAAxB,CAAN;AACA,aAAOG,SAAP;AACD,KAtHoC;;AAuHrCmB,IAAAA,SAAS,GAAG;AACV,UAAMtB,GAAG,GAAGL,aAAa,CACvBY,eAAe,CAACL,SAAD,CADQ,EAEvBd,MAFuB,CAAzB;AAIA,UAAMhD,IAAI,GAAGjE,MAAI,CAAC6H,GAAD,CAAjB;AACA,UAAMuB,aAAa,GAAGzI,GAAG,GAAG,GAAN,GAAYsD,IAAlC,CANU;AAQV;;AACAxB,MAAAA,MAAM,CACJwB,IADI,EAEJ,EAFI,EAGJ,gBAAgBmF,aAAhB,GAAgC,GAAhC,GAAsCvB,GAAtC,GAA4C,GAHxC,EAIJ7D,MAAM,CAACtB,GAAP,CAAWuB,IAAX,CAJI,CAAN;AAMA,aAAOmF,aAAP;AACD,KAvIoC;;AAwIrCC,IAAAA,YAAY,GAAG;AACb,UAAMxB,GAAG,GAAGL,aAAa,CACvBY,eAAe,CAACL,SAAD,CADQ,EAEvBd,MAFuB,CAAzB;AAKA,UAAI,CAACY,GAAL,EAAU,OAAO5G,IAAP;AACV,UAAMgD,IAAI,GAAGjE,MAAI,CAAC6H,GAAD,CAAjB;AACApF,MAAAA,MAAM,CAACwB,IAAD,EAAO,EAAP,EAAW4D,GAAX,EAAgB7D,MAAM,CAACtB,GAAP,CAAWuB,IAAX,CAAhB,CAAN;AACA,aAAO,YAAY;AACjB,SAACD,MAAM,CAACM,MAAP,CAAcL,IAAd,CAAD,IAAwB8C,IAAI,CAACjF,QAAL,CAAcwC,MAAd,CAAqBL,IAArB,CAAxB;AACD,OAFD;AAGD,KApJoC;;AAqJrCqF,IAAAA,YAAY,CAACC,UAAD,EAAa7F,QAAb,EAAiC;AAAA,UAApBA,QAAoB;AAApBA,QAAAA,QAAoB,GAAT,OAAS;AAAA;;AAC3C,UAAM;AAAEmE,QAAAA,GAAF;AAAO2B,QAAAA;AAAP,UAAgBC,eAAe,CAACF,UAAD,EAAapI,OAAO,CAACuI,YAArB,CAArC;AACA,UAAI,CAAC7B,GAAL,EAAU,OAAO5G,IAAP;AACV0I,MAAAA,WAAW,CAAiB1C,MAAjB,EAAyBuC,IAAzB,CAAX;AACA,aAAO7F,MAAM,CAAC0F,YAAP,CAAoB3F,QAAQ,GAAG,GAAX,GAAiBmE,GAAjB,GAAuB,GAA3C,CAAP;AACD,KA1JoC;;AA2JrC+B,IAAAA,YAAY,CAACC,UAAD,EAAa;AACvB,UAAMtF,KAAqB,GAAG,EAA9B;;AAEA,WAAK,IAAMN,KAAX,IAAmB4F,UAAnB,EAA+B;AAC7BtF,QAAAA,KAAK,CAACY,IAAN,CACExB,MAAM,CAAC2F,YAAP,CAEGtC,MAAM,CAAC/C,KAAD,CAAN,GACC+C,MAAM,CAAC/C,KAAD,CAAN,KAAkD,KAAK,CAAvD,GACI4F,UAAU,CAAC5F,KAAD,CADd,GAEI0F,WAAW,CACT3C,MAAM,CAAC/C,KAAD,CADG,EAET4F,UAAU,CAAC5F,KAAD,CAFD,CALnB,EASE,MAAMN,MAAM,CAACmG,KAAP,CAAa7F,KAAb,CATR,CADF;AAaD;;AAED,aAAO,YAAY;AACjBM,QAAAA,KAAK,CAACzB,OAAN;AACD,OAFD;AAGD,KAjLoC;;AAkLrCgH,IAAAA,KAAK,CAACA,KAAD,EAAQ;AACX,aAAOnJ,GAAG,GAAG,GAAN,GAAYmJ,KAAZ,GAAoB,QAA3B;AACD,KApLoC;;AAqLrC/C,IAAAA,IArLqC;AAsLrC/G,UAAAA,MAtLqC;AAuLrCiH,IAAAA;AAvLqC,GAAvC;AA0LAR,EAAAA,MAAM,CAACsD,cAAP,CAAsBpG,MAAtB,EAA8B,QAA9B,EAAwC;AACtCQ,IAAAA,GAAG,GAAG;AACJ,aAAO8C,MAAP;AACD,KAHqC;;AAItC+C,IAAAA,YAAY,EAAE;AAJwB,GAAxC;AAMArG,EAAAA,MAAM,CAAC2F,YAAP,CAAoBnI,OAAO,CAAC8F,MAAR,IAAkBgD,QAAtC;AACAtG,EAAAA,MAAM,CAACiG,YAAP,CAAoBzI,OAAO,CAAC6F,MAAR,IAAkBiD,QAAtC;AACA,SAAO,OAAOpI,OAAP,KAAmB,WAAnB,IAAkCA,YAAA,KAAyB,YAA3D,GACH4E,MAAM,CAACyD,MAAP,CAAcvG,MAAd,CADG,GAEHA,MAFJ;AAGD;AAED,IAAMsG,QAAa,GAAG,EAAtB;;AAoeA;AACA;AACA;AACA;AACA;AACA;AACO,SAASzC,aAAT,CAIL7D,MAJK,EAKLsD,MALK,EAMG;AACR,MAAMnG,KAAK,GAAG,OAAO6C,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACsD,MAAD,CAArC,GAAgDtD,MAA9D;AACA,SAAO,OAAO7C,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,GACHqJ,oBAAoB,CAACrJ,KAAD,CADjB,GAGDA,KAAK,IAAI,EAHf;AAID;;AAED,SAASqJ,oBAAT,CAA8BC,MAA9B,EAA2D;AACzD,MAAInK,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAMU,GAAX,IAAkByJ,MAAlB,EAA0B;AACxB,QAAMtJ,MAAK,GAAGsJ,MAAM,CAACzJ,GAAD,CAApB;;AAEA,QAAI,OAAOG,MAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAMuJ,QAAQ,GAAG1J,GAAG,CAACL,UAAJ,CAAe,CAAf,MAAsB,EAAvC;AACAL,MAAAA,MAAM,IACJ,CAACoK,QAAQ,GAAG1J,GAAH,GAAS2J,OAAO,CAAC3J,GAAD,CAAzB,IACA,GADA,IAEC,OAAOG,MAAP,KAAiB,QAAjB,IACDyJ,QAAQ,CAAC5J,GAAD,CADP,IAEDG,MAAK,KAAK,CAFT,IAGDuJ,QAHC,GAIGvJ,MAJH,GAKGA,MAAK,GAAG,IAPZ,IAQA,GATF;AAUD,KAZD,MAYO;AACLb,MAAAA,MAAM,IAAIU,GAAG,GAAG,GAAN,GAAYwJ,oBAAoB,CAACrJ,MAAD,CAAhC,GAAyD,GAAnE;AACD;AACF;;AAED,SAAOb,MAAP;AACD;;AAED,SAASmI,eAAT,CAAyBxB,IAAzB,EAAmD;AACjD,MAAM4D,QAAQ,GAAG5D,IAAI,CAAC,CAAD,CAArB;AACA,SAAOmC,KAAK,CAAC0B,OAAN,CAAcD,QAAd,IACHA,QAAQ,CAAC3D,MAAT,CAAgB,CAACP,IAAD,EAAOoE,IAAP,EAAavK,CAAb,KAAmBmG,IAAI,GAAGoE,IAAP,IAAe9D,IAAI,CAACzG,CAAC,GAAG,CAAL,CAAJ,IAAe,EAA9B,CAAnC,EAAsE,EAAtE,CADG,GAEHqK,QAFJ;AAGD;AAGD;;;AACA,IAAMG,SAAS,GAAG,YAAlB;AACA,IAAMC,eAAe,GAAG,SAAxB;AAEA;;AACA,IAAMC,SAAiC,GAAG,EAA1C;;AACA,SAASP,OAAT,CAAiBrK,MAAjB,EAAyC;AAAA;;AACvC,8BACE4K,SAAS,CAAC5K,MAAD,CADX,iEAEG4K,SAAS,CAAC5K,MAAD,CAAT,GAAoBA,MAAM,CAACc,OAAP,CAAe4J,SAAf,EAA0B,KAA1B,EAAiCG,WAAjC,EAFvB;AAID;;AAED,SAASrB,eAAT,CACExC,MADF,EAEE8D,MAFF,EAGEC,KAHF,EAIoB;AAAA,MADlBA,KACkB;AADlBA,IAAAA,KACkB,GADA,EACA;AAAA;;AAClB,MAAMxB,IAAyB,GAAG,EAAlC;AACA,MAAI3B,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIlH,GAAT,IAAgBsG,MAAhB,EAAwB;AACtB,QAAMnG,OAAK,GAAGmG,MAAM,CAACtG,GAAD,CAApB;;AAEA,QAAI,OAAOG,OAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAMmK,MAAM,GAAGxB,eAAe,CAAC3I,OAAD,EAAQiK,MAAR,EAAgBC,KAAK,CAAClC,MAAN,CAAanI,GAAb,CAAhB,CAA9B;AACA6I,MAAAA,IAAI,CAAC7I,GAAD,CAAJ,GAAYsK,MAAM,CAACzB,IAAnB;AACA3B,MAAAA,GAAG,IAAIoD,MAAM,CAACpD,GAAd;AACD,KAJD,MAIO;AACL,UAAI5D,MAAI,GAAGqG,OAAO,CAChBU,KAAK,CAAC3K,MAAN,GAAe,CAAf,GAAmB2K,KAAK,CAACrE,IAAN,CAAW,GAAX,IAAkB,GAAlB,GAAwBhG,GAA3C,GAAiDA,GADjC,CAAP,CAETI,OAFS,CAED6J,eAFC,EAEgB,GAFhB,CAAX;;AAGApB,MAAAA,IAAI,CAAC7I,GAAD,CAAJ,GACE,UACCsD,MAAI,GACH,QACC8G,MAAM,KAAK,IAAX,IAAoBA,MAAM,IAAI,CAACA,MAAM,CAAC9G,MAAD,CAArC,GACGiH,OAAO,CAACjH,MAAD,CADV,GAEGA,MAHJ,CAFF,IAMA,GAPF;AAQA4D,MAAAA,GAAG,IAAI5D,MAAI,GAAG,GAAP,GAAanD,OAAb,GAAqB,GAA5B;AACD;AACF;;AAED,SAAO;AAAE0I,IAAAA,IAAF;AAAQ3B,IAAAA;AAAR,GAAP;AACD;;AAED,IAAMqD,OAAO,gBAAGxK,QAAQ,CAAC,EAAD,EAAKwG,IAAL,CAAxB;;AAOA,SAASyC,WAAT,CAIEwB,MAJF,EAKEC,MALF,EAM+B;AAC7B,OAAK,IAAMzK,GAAX,IAAkByK,MAAlB,EAA0B;AACxB,QAAMtK,OAAK,GAAGsK,MAAM,CAACzK,GAAD,CAApB;AACAwK,IAAAA,MAAM,CAACxK,GAAD,CAAN,GACE,OAAOG,OAAP,KAAiB,QAAjB,GAA4B6I,WAAW,CAACwB,MAAM,CAACxK,GAAD,CAAN,IAAe,EAAhB,EAAoBG,OAApB,CAAvC,GAAoEA,OADtE;AAED;;AAED,SAAOqK,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,WAAT,CAELC,IAFK,EAE4B;AACjC,SACE,WACAA,IAAI,CAACvK,OAAL,CAAa,KAAb,EAAoB,GAApB,EAAyBA,OAAzB,CAAiC4J,SAAjC,EAA4C,KAA5C,EAAmDG,WAAnD,EADA,GAEA,GAHF;AAKD;AAqBD;AACA;IACanH,MAAsC,gBAAGmD,YAAY;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}