"use strict";

exports.__esModule = true;
exports.default = void 0;

var React = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _event = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@react-hook/event"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useHover(target, options = {}) {
  const {
    enterDelay,
    leaveDelay
  } = options;
  const timeout = React.useRef();
  const [hovering, setHovering] = React.useState(false);

  const toggle = which => {
    if (!canHover()) return;
    const delay = which ? enterDelay : leaveDelay;
    window.clearTimeout(timeout.current);

    function _ref() {
      return setHovering(which);
    }

    if (delay) {
      timeout.current = window.setTimeout(_ref, delay);
    } else {
      setHovering(which);
    }
  };

  (0, _event.default)(target, 'mouseenter', () => toggle(true));
  (0, _event.default)(target, 'mouseleave', () => toggle(false)); // Cleans up timeout on unmount

  function _ref2() {
    window.clearTimeout(timeout.current);
  }

  React.useEffect(() => _ref2, // eslint-disable-next-line react-hooks/exhaustive-deps
  []);
  return hovering;
}

const canHover = () => typeof window !== 'undefined' ? !window.matchMedia('(hover: none)').matches : false;

var _default = useHover;
exports.default = _default;